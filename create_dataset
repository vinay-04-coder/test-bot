import os
import pickle
import mediapipe as mp
import cv2

# Initialize Mediapipe components
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

hands = mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)

# Define data directory and output file
DATA_DIR = './data'
OUTPUT_FILE = './data.pickle'

# Check if DATA_DIR exists
if not os.path.exists(DATA_DIR):
    print(f"Error: Data directory '{DATA_DIR}' does not exist.")
    exit()

data = []
labels = []

# Process each subdirectory in DATA_DIR
for dir_ in os.listdir(DATA_DIR):
    dir_path = os.path.join(DATA_DIR, dir_)
    if not os.path.isdir(dir_path):
        print(f"Skipping non-directory: {dir_path}")
        continue

    print(f"Processing directory: {dir_}")
    for img_path in os.listdir(dir_path):
        img_full_path = os.path.join(dir_path, img_path)

        # Ensure it's a valid image file
        if not os.path.isfile(img_full_path) or not img_path.lower().endswith(('.png', '.jpg', '.jpeg')):
            print(f"Skipping non-image file: {img_full_path}")
            continue

        data_aux = []
        x_ = []
        y_ = []

        # Read and process the image
        img = cv2.imread(img_full_path)
        if img is None:
            print(f"Error reading image: {img_full_path}")
            continue

        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = hands.process(img_rgb)

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                for i in range(len(hand_landmarks.landmark)):
                    x = hand_landmarks.landmark[i].x
                    y = hand_landmarks.landmark[i].y

                    x_.append(x)
                    y_.append(y)

                for i in range(len(hand_landmarks.landmark)):
                    x = hand_landmarks.landmark[i].x
                    y = hand_landmarks.landmark[i].y
                    data_aux.append(x - min(x_))
                    data_aux.append(y - min(y_))

            data.append(data_aux)
            labels.append(dir_)

# Save data to pickle file
if data and labels:
    with open(OUTPUT_FILE, 'wb') as f:
        pickle.dump({'data': data, 'labels': labels}, f)
    print(f"Data successfully saved to {OUTPUT_FILE}")
else:
    print("No data was collected. Please check your images and directories.")

